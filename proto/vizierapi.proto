syntax = "proto3";

package demo.vizierpb;

option go_package = "demo-connector/proto";

// Simplified version of Pixie's Vizier API for demo purposes

enum DataType {
  DATA_TYPE_UNKNOWN = 0;
  BOOLEAN = 1;
  INT64 = 2;
  UINT128 = 3;
  FLOAT64 = 4;
  STRING = 5;
  TIME64NS = 6;
}

enum SemanticType {
  ST_UNSPECIFIED = 0;
  ST_NONE = 1;
  ST_TIME_NS = 2;
  ST_SERVICE_NAME = 300;
  ST_POD_NAME = 400;
  ST_NAMESPACE_NAME = 700;
  ST_BYTES = 800;
  ST_PERCENT = 900;
  ST_DURATION_NS = 901;
}

message Status {
  int32 code = 1;
  string message = 2;
}

message Column {
  string column_name = 1;
  DataType column_type = 2;
  SemanticType column_semantic_type = 3;
}

message RowBatchData {
  repeated Column cols = 1;
  int64 num_rows = 2;
  repeated string string_data = 3;
  repeated int64 int64_data = 4;
  repeated double float64_data = 5;
  repeated bool bool_data = 6;
  repeated uint64 uint128_data = 7;
}

message QueryMetadata {
  string name = 1;
  string id = 2;
}

message QueryExecutionStats {
  int64 timing = 1;
  int64 bytes_processed = 2;
  int64 records_processed = 3;
}

message QueryData {
  RowBatchData batch = 1;
  QueryExecutionStats execution_stats = 2;
}

message ExecuteScriptRequest {
  string query_str = 1;
  string cluster_id = 3;
}

message ExecuteScriptResponse {
  Status status = 1;
  string query_id = 2;
  oneof result {
    QueryData data = 3;
    QueryMetadata meta_data = 4;
  }
}

message HealthCheckRequest {
  string cluster_id = 1;
}

message HealthCheckResponse {
  Status status = 1;
}

service VizierService {
  rpc ExecuteScript(ExecuteScriptRequest) returns (stream ExecuteScriptResponse);
  rpc HealthCheck(HealthCheckRequest) returns (stream HealthCheckResponse);
}
